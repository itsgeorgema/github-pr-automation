env:
  browser: true
  es2021: true
  node: true
  jest: true
  vitest: true
  cypress: true

extends:
  - "eslint:recommended"
  - "plugin:import/recommended"
  - "plugin:import/typescript"
  - "prettier"

plugins:
  - "import"
  - "prettier"

settings:
  import/resolver:
    typescript: {}
    node:
      extensions: [".js", ".jsx", ".ts", ".tsx", ".json"]

rules:
  # Prettier integration
  prettier/prettier: "error"
  
  # Import rules
  import/order:
    - "error"
    - groups: ["builtin", "external", "internal", "parent", "sibling", "index"]
      newlines-between: "always"
      alphabetize: { order: "asc", caseInsensitive: true }
  import/no-unresolved: "error"
  import/no-duplicates: "error"
  import/no-unused-modules: "warn"
  
  # General code quality
  no-console: "warn"
  no-debugger: "error"
  no-unused-vars: "warn"
  no-var: "error"
  prefer-const: "error"
  eqeqeq: ["error", "always"]

# Language-specific overrides
overrides:
  # JavaScript files
  - files: ["*.js", "*.jsx"]
    env:
      browser: true
      node: true
    extends:
      - "plugin:react/recommended"
      - "plugin:react/jsx-runtime"
      - "plugin:react-hooks/recommended"
      - "plugin:jsx-a11y/recommended"
    plugins:
      - "react"
      - "react-hooks"
      - "jsx-a11y"
    settings:
      react:
        version: "detect"
    rules:
      react/prop-types: "off"
      react/react-in-jsx-scope: "off"
      react/display-name: "off"
      jsx-a11y/anchor-is-valid: "off"

  # TypeScript files
  - files: ["*.ts", "*.tsx"]
    parser: "@typescript-eslint/parser"
    parserOptions:
      ecmaVersion: latest
      sourceType: module
      ecmaFeatures:
        jsx: true
      project: ["./tsconfig.json", "./tsconfig.*.json"]
    extends:
      - "plugin:@typescript-eslint/recommended"
      - "plugin:@typescript-eslint/recommended-requiring-type-checking"
      - "plugin:react/recommended"
      - "plugin:react/jsx-runtime"
      - "plugin:react-hooks/recommended"
      - "plugin:jsx-a11y/recommended"
    plugins:
      - "@typescript-eslint"
      - "react"
      - "react-hooks"
      - "jsx-a11y"
    settings:
      react:
        version: "detect"
    rules:
      # TypeScript specific
      "@typescript-eslint/no-unused-vars": ["warn", { argsIgnorePattern: "^_" }]
      "@typescript-eslint/explicit-function-return-type": "off"
      "@typescript-eslint/explicit-module-boundary-types": "off"
      "@typescript-eslint/no-explicit-any": "warn"
      "@typescript-eslint/no-non-null-assertion": "warn"
      "@typescript-eslint/prefer-nullish-coalescing": "error"
      "@typescript-eslint/prefer-optional-chain": "error"
      
      # React specific
      react/prop-types: "off"
      react/react-in-jsx-scope: "off"
      react/display-name: "off"
      jsx-a11y/anchor-is-valid: "off"
      
      # Override base rules with TS versions
      no-unused-vars: "off"

  # Next.js specific files
  - files: ["next.config.*", "pages/**/*", "app/**/*", "src/pages/**/*", "src/app/**/*"]
    extends:
      - "plugin:@next/next/recommended"
    plugins:
      - "@next/next"

  # Test files
  - files: ["**/__tests__/**/*", "**/*.{test,spec}.{js,jsx,ts,tsx}"]
    env:
      jest: true
      vitest: true
    extends:
      - "plugin:jest/recommended"
      - "plugin:testing-library/react"
    plugins:
      - "jest"
      - "testing-library"

  # Configuration files
  - files: ["*.config.{js,ts}", ".*rc.{js,ts}", "*.setup.{js,ts}"]
    env:
      node: true
    rules:
      no-console: "off"

  # YAML files
  - files: ["*.yml", "*.yaml"]
    parser: "yaml-eslint-parser"
    extends:
      - "plugin:yml/standard"
    plugins:
      - "yml"

  # JSON files
  - files: ["*.json", "*.jsonc"]
    parser: "jsonc-eslint-parser"
    extends:
      - "plugin:jsonc/recommended-with-json"
    plugins:
      - "jsonc"

  # Markdown files
  - files: ["*.md", "*.mdx"]
    parser: "eslint-mdx"
    extends:
      - "plugin:mdx/recommended"
    plugins:
      - "mdx"
