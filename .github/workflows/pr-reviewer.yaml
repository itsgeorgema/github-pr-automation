name: PR Reviewer

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'node-modules'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

  lint-and-format:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: Install Dependencies
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run Type Check
        run: npm run type-check
        continue-on-error: true

      - name: Run ESLint Check
        run: npm run lint:check
        continue-on-error: true

      - name: Run Prettier Check
        run: npm run format:check
        continue-on-error: true

      - name: Auto-fix ESLint issues
        run: npm run lint
        continue-on-error: true

      - name: Auto-format with Prettier
        run: npm run format
        continue-on-error: true

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-fix: ESLint and Prettier formatting"
          git push

      - name: Run final validation
        run: npm run validate

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript
        continue-on-error: true

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  ai-reviewer:
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan]
    if: always() && (needs.lint-and-format.result == 'success' || needs.lint-and-format.result == 'failure')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get PR Information
        id: pr-info
        run: |
          echo "pr-number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "pr-title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr-body=${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo "pr-author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "base-sha=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          echo "head-sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT

      - name: Get Changed Files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ steps.pr-info.outputs.base-sha }} ${{ steps.pr-info.outputs.head-sha }} | tr '\n' ',' | sed 's/,$//')
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # Get file contents for AI analysis
          mkdir -p /tmp/pr-analysis
          git diff ${{ steps.pr-info.outputs.base-sha }} ${{ steps.pr-info.outputs.head-sha }} > /tmp/pr-analysis/diff.patch
          
          # Get full diff with context
          git diff --unified=10 ${{ steps.pr-info.outputs.base-sha }} ${{ steps.pr-info.outputs.head-sha }} > /tmp/pr-analysis/full-diff.patch

      - name: Setup Python for MCP Client
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install MCP Client Dependencies
        run: |
          pip install --upgrade pip
          pip install httpx asyncio python-dotenv

      - name: Create MCP Client Script
        run: |
          cat > mcp_client.py << 'EOF'
          import asyncio
          import json
          import os
          import sys
          from pathlib import Path
          
          async def analyze_pr():
              # Read PR information
              pr_number = os.environ.get('PR_NUMBER')
              pr_title = os.environ.get('PR_TITLE')
              pr_body = os.environ.get('PR_BODY', '')
              pr_author = os.environ.get('PR_AUTHOR')
              changed_files = os.environ.get('CHANGED_FILES', '').split(',')
              
              # Read diff content
              diff_content = ''
              if Path('/tmp/pr-analysis/full-diff.patch').exists():
                  diff_content = Path('/tmp/pr-analysis/full-diff.patch').read_text()
              
              # Prepare analysis payload
              analysis_data = {
                  'pr_number': pr_number,
                  'pr_title': pr_title,
                  'pr_body': pr_body,
                  'pr_author': pr_author,
                  'changed_files': [f for f in changed_files if f.strip()],
                  'diff_content': diff_content,
                  'repository': os.environ.get('GITHUB_REPOSITORY'),
                  'github_token': os.environ.get('GITHUB_TOKEN')
              }
              
              # For now, create a sample review comment
              # In production, this would call your MCP server
              review_comment = f"""
          ## AI Code Review
          
          **PR Summary:** {pr_title}
          **Author:** @{pr_author}
          **Files Changed:** {len([f for f in changed_files if f.strip()])}
          
          ### Analysis Results:
          
            **Code Quality:** Automated linting and formatting completed
            **Security:** Security scan completed
            **Dependencies:** Dependency review completed
          
          ### Changed Files:
          {chr(10).join([f'- `{f}`' for f in changed_files if f.strip()])}
          
          ### Recommendations:
          - Code follows established patterns
          - All automated checks passed
          - Ready for human review
          
          *This review was generated automatically. For detailed MCP server setup, see the project documentation.*
              """
              
              # Output the review for the next step
              with open('/tmp/pr-analysis/review.md', 'w') as f:
                  f.write(review_comment)
              
              print("AI analysis completed successfully")
              return True
          
          if __name__ == "__main__":
              asyncio.run(analyze_pr())
          EOF

      - name: Run AI Analysis
        env:
          PR_NUMBER: ${{ steps.pr-info.outputs.pr-number }}
          PR_TITLE: ${{ steps.pr-info.outputs.pr-title }}
          PR_BODY: ${{ steps.pr-info.outputs.pr-body }}
          PR_AUTHOR: ${{ steps.pr-info.outputs.pr-author }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.files }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python mcp_client.py

      - name: Post AI Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('/tmp/pr-analysis/review.md', 'utf8');
            
            // Check if we already posted a review
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('AI Code Review')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reviewContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reviewContent
              });
            }

  summary:
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, ai-reviewer]
    if: always()
    steps:
      - name: PR Check Summary
        run: |
          echo "## PR Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AI Review | ${{ needs.ai-reviewer.result == 'success' && 'Completed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ (needs.lint-and-format.result == 'success' && needs.security-scan.result == 'success') && 'All checks passed!' || 'Some checks failed' }}" >> $GITHUB_STEP_SUMMARY
