{
  "name": "watchdog",
  "version": "1.0.0",
  "description": "Watchdog: comprehensive GitHub PR automation with linting, formatting, and AI review",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "lint": "npm run lint:js && npm run lint:python && npm run lint:java && npm run lint:cpp && npm run lint:sql",
    "lint:check": "npm run lint:js:check && npm run lint:python:check && npm run lint:java:check && npm run lint:cpp:check && npm run lint:sql:check",
    "lint:js": "eslint . --config eslint.config.js --fix",
    "lint:js:check": "eslint . --config eslint.config.js",
    "lint:js:fix": "eslint . --config eslint.config.js --fix",
    "lint:python": "if command -v python >/dev/null 2>&1; then python -m flake8 . --extend-ignore=E203,W503 --max-line-length=100 || true; else echo 'Python not available, skipping Python linting'; fi",
    "lint:python:check": "if command -v python >/dev/null 2>&1; then python -m flake8 . --extend-ignore=E203,W503 --max-line-length=100; else echo 'Python not available, skipping Python linting'; fi",
    "lint:java": "if [ -f checkstyle.xml ] && [ -f checkstyle.jar ]; then java -jar checkstyle.jar -c checkstyle.xml **/*.java || true; else echo 'Java tools not available, skipping Java linting'; fi",
    "lint:java:check": "if [ -f checkstyle.xml ] && [ -f checkstyle.jar ]; then java -jar checkstyle.jar -c checkstyle.xml **/*.java; else echo 'Java tools not available, skipping Java linting'; fi",
    "lint:cpp": "if command -v clang-tidy >/dev/null 2>&1; then find . -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs clang-tidy --checks='*' || true; else echo 'C++ linter not available, skipping C++ linting'; fi",
    "lint:cpp:check": "if command -v clang-tidy >/dev/null 2>&1; then find . -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs clang-tidy --checks='*'; else echo 'C++ linter not available, skipping C++ linting'; fi",
    "lint:sql": "if command -v sqlfluff >/dev/null 2>&1; then sqlfluff lint . --dialect=postgres || true; else echo 'SQL linter not available, skipping SQL linting'; fi",
    "lint:sql:check": "if command -v sqlfluff >/dev/null 2>&1; then sqlfluff lint . --dialect=postgres; else echo 'SQL linter not available, skipping SQL linting'; fi",
    "format": "npm run format:js && npm run format:python && npm run format:java && npm run format:cpp && npm run format:sql",
    "format:check": "npm run format:js:check && npm run format:python:check && npm run format:java:check && npm run format:cpp:check && npm run format:sql:check",
    "format:js": "prettier --write \"**/*.{js,jsx,ts,tsx,json,jsonc,md,mdx,html,css,scss,less,yml,yaml,xml,svg}\"",
    "format:js:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,jsonc,md,mdx,html,css,scss,less,yml,yaml,xml,svg}\"",
    "format:js:fix": "prettier --write \"**/*.{js,jsx,ts,tsx,json,jsonc,md,mdx,html,css,scss,less,yml,yaml,xml,svg}\"",
    "format:python": "if command -v black >/dev/null 2>&1; then black . --line-length=100 --target-version=py38; fi && if command -v isort >/dev/null 2>&1; then isort . --profile=black --line-length=100; fi || echo 'Python formatters not available, skipping Python formatting'",
    "format:python:check": "if command -v black >/dev/null 2>&1; then black . --line-length=100 --target-version=py38 --check; fi && if command -v isort >/dev/null 2>&1; then isort . --profile=black --line-length=100 --check-only; fi || echo 'Python formatters not available, skipping Python formatting'",
    "format:java": "if command -v google-java-format >/dev/null 2>&1; then find . -name '*.java' | xargs google-java-format --replace; else echo 'Java formatter not available, skipping Java formatting'; fi",
    "format:java:check": "if command -v google-java-format >/dev/null 2>&1; then find . -name '*.java' | xargs google-java-format --dry-run --set-exit-if-changed; else echo 'Java formatter not available, skipping Java formatting'; fi",
    "format:cpp": "if command -v clang-format >/dev/null 2>&1; then find . -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs clang-format -i --style=Google; else echo 'C++ formatter not available, skipping C++ formatting'; fi",
    "format:cpp:check": "if command -v clang-format >/dev/null 2>&1; then find . -name '*.cpp' -o -name '*.hpp' -o -name '*.c' -o -name '*.h' | xargs clang-format --dry-run --Werror --style=Google; else echo 'C++ formatter not available, skipping C++ formatting'; fi",
    "format:sql": "if command -v sqlfluff >/dev/null 2>&1; then sqlfluff format . --dialect=postgres; else echo 'SQL formatter not available, skipping SQL formatting'; fi",
    "format:sql:check": "if command -v sqlfluff >/dev/null 2>&1; then sqlfluff format . --dialect=postgres --check; else echo 'SQL formatter not available, skipping SQL formatting'; fi",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "prepare": "husky install",
    "pre-commit": "lint-staged",
    "validate": "npm run lint:check && npm run format:check && (find . -name '*.ts' -o -name '*.tsx' | grep -v mcp-servers | grep -q . && npm run type-check || echo 'No TypeScript files found, skipping type check')",
    "validate:js": "npm run lint:js:check && npm run format:js:check && (find . -maxdepth 1 -name '*.ts' -o -name '*.tsx' | grep -q . && npm run type-check || echo 'No TypeScript files found, skipping type check')",
    "validate:python": "npm run lint:python:check && npm run format:python:check",
    "validate:java": "npm run lint:java:check && npm run format:java:check",
    "validate:cpp": "npm run lint:cpp:check && npm run format:cpp:check",
    "validate:sql": "npm run lint:sql:check && npm run format:sql:check"
  },
  "devDependencies": {
    "@next/eslint-plugin-next": "^15.5.2",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "eslint": "^9.34.0",
    "eslint-config-next": "^15.5.2",
    "eslint-config-prettier": "^9.1.0",
    "eslint-import-resolver-typescript": "^3.6.3",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jest": "^28.9.0",
    "eslint-plugin-jsonc": "^2.18.2",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-mdx": "^3.1.5",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "eslint-plugin-testing-library": "^7.1.0",
    "eslint-plugin-yml": "^1.15.0",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jsonc-eslint-parser": "^2.4.0",
    "lint-staged": "^15.2.10",
    "prettier": "^3.6.2",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.42.0",
    "yaml-eslint-parser": "^1.2.3"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,jsonc,md,mdx,html,css,scss,less,yml,yaml}": [
      "prettier --write"
    ],
    "*.py": [
      "python -m flake8 --extend-ignore=E203,W503 --max-line-length=100",
      "black --line-length=100 --target-version=py38",
      "isort --profile=black --line-length=100"
    ],
    "*.java": [
      "google-java-format --replace"
    ],
    "*.{cpp,hpp,c,h}": [
      "clang-format -i --style=Google"
    ],
    "*.sql": [
      "sqlfluff format --dialect=postgres"
    ]
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "keywords": [
    "github",
    "automation",
    "eslint",
    "prettier",
    "typescript",
    "react",
    "nextjs",
    "ai",
    "code-review"
  ],
  "author": "",
  "license": "MIT"
}
